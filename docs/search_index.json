[["index.html", "Intro to R About First steps", " Intro to R Kyla McConnell 12/21/2020 About Why should you learn R? Its totally free! open-source a scripting language (reproducible and transparent) an established tool with tons of tutorials and help pages an amazing and inclusive community First steps R = programming language that can be written directly into your computers console/terminal R-Studio = integrated development environment (IDE) with lots of features Almost all R-users have both installed R-Studio Four panels: Top-left: scripting panel  write and save code (may only open when you open a new file) Bottom-left: console panel  input/output that wont be saved Top-right: environment panel  dataframes, variables (and sometimes has other features too, depending on what youre working with) Bottom-right: install and update packages, preview plots, read help files, and some other features R script (.R) File -&gt; New File -&gt; R Script simple: only code write lines of code in the order they are meant to be run run each line by clicking that line and pressing Control + R (on Windows) or Cmd + Enter (on Mac) output shows below, in console panel (number in bracket shows amount of output if there is more than one line) Try it out: 5 + 5 comments that are not read as code: # R-Markdown file (.Rmd) File -&gt; New File -&gt; R Markdown R-Markdown: more complex, both code and text, can also include images and some basic formatting (## for headers) YAML information at top: text in whitespace = text (unlike in an R script) keep notes or leave a record of your decisions code needs a code chunk  type it with three backticks or use Insert in the top bar and select R Run code: - press Control + R (on Windows) or Cmd + Enter (on Mac) with your cursor in the line - use green right-pointing arrow at right edge of code block - arrow with line under it -&gt; runs all code chunks above (but not the current one) Output: - directly below code block in preview window Can also use (#) to denote lines that are comments and shouldnt be read as R code "],["data-in-r.html", "Week 1 Data in R 1.1 Creating Data in R 1.2 Importing Data to R", " Week 1 Data in R 1.1 Creating Data in R # Data creation sex &lt;-c(&quot;M&quot;,&quot;F&quot;,&quot;M&quot;,&quot;F&quot;,&quot;M&quot;,&quot;F&quot;,&quot;M&quot;,&quot;F&quot;,&quot;M&quot;,&quot;F&quot;) math &lt;-c(85,90, 88,90,99,87,88,79,80,10) english &lt;-c(80, 90,87,78,79,90,99,90,80,88) # data frame data1.data &lt;- data.frame(sex,math,english) #vaccine &lt;- read.csv(&quot;paste&quot;) head(data1.data,10) ## sex math english ## 1 M 85 80 ## 2 F 90 90 ## 3 M 88 87 ## 4 F 90 78 ## 5 M 99 79 ## 6 F 87 90 ## 7 M 88 99 ## 8 F 79 90 ## 9 M 80 80 ## 10 F 10 88 tail(data1.data) ## sex math english ## 5 M 99 79 ## 6 F 87 90 ## 7 M 88 99 ## 8 F 79 90 ## 9 M 80 80 ## 10 F 10 88 min(data1.data$math) ## [1] 10 max(data1.data$english) ## [1] 99 1.2 Importing Data to R 1.2.1 Importing from excel file 1.2.2 Importing from webpage 1.2.3 Importing from csv file "],["data-cleaning-wrangling.html", "Week 2 Data Cleaning / Wrangling 2.1 Tidyverse 2.2 (2) Variables 2.3 (3) Data types 2.4 (4) Packages 2.5 (5) Reading in data 2.6 (6) Exploring your data 2.7 (7) Columns 2.8 (8) The pipe operator 2.9 (9) Conclusion 2.10 Deplyr", " Week 2 Data Cleaning / Wrangling 2.1 Tidyverse 2.2 (2) Variables 2.2.1 Simple variables Variables: give name/label to output, saves it (can be used anywhere below in current script) name_of_variable &lt;- code For example: num_cats &lt;- 12 num_cats * 3 ## [1] 36 num_dogs &lt;- 7 num_pets &lt;- num_cats + num_dogs num_pets ## [1] 19 double_cats &lt;- num_cats * 2 double_cats ## [1] 24 Variables are case sensitive (caps/lowercase matters) and cant include spaces. Commonly snake_case You can preview your current variables in the R-Studio environment pane 2.2.1.1 Try it out You are planning a pizza party and want to figure out how many pieces of pizza each of your guests can eat before the pizzas run out. Create a variable called guests and assign it to the number of guests you have at your party: 15. (First, make a code block under this question!) You order 5 pizzas. Assign the variable pizzas to the amount of pizzas you have: 6. Each pizza has 12 slices. Assign the variable slices to the amount of slices you have over all pizzas (hint: multiple the slices per pizza by the total number of pizzas  you can use the pizzas variable here instead of retyping the number) Divide your slices variable by your guests variable to figure out how many slices each person can have. 5 more people arrive to the party uninvited. Update your guests variable to the total number you have now. How many slices can each person have now? 2.2.2 Vectors If you want to have multiple items of the same type: - Use a vector  enclosed in the syntax c() command length() returns number of items in the vector my_numbers &lt;- c(12, 14, 26, 57, 82) length(my_numbers) ## [1] 5 You can also do vector-wise operations: my_numbers + 2 ## [1] 14 16 28 59 84 my_numbers ^ 2 ## [1] 144 196 676 3249 6724 my_numbers / 10 ## [1] 1.2 1.4 2.6 5.7 8.2 Mathematical operation is broadcast to each item Add/subtract/multiply/divide a vector by another vector: items matched up one at a time in a loop my_numbers + my_numbers ## [1] 24 28 52 114 164 You can also take a certain item from a vector using square brackets. For example, take the first item: my_numbers[1] ## [1] 12 2.2.2.1 Try it out Make a variable called long_array and assign it the values 1, 1, 2, 2, 5, 10 (dont forget the c() syntax!) Make a variable called short_array and assign it the values 1, 6, 10 Subtract short_array from long_array Subtract long_array from short_array Look at the output. What does this tell you about how R deals with vectors of different lengths? 2.3 (3) Data types Data types  how R interprets the input you give it Figure out what type something is with class() 2.3.1 Numeric class(8.8) ## [1] &quot;numeric&quot; class(4.5113) ## [1] &quot;numeric&quot; class(2) ## [1] &quot;numeric&quot; fav_number &lt;- 12 class(fav_number) ## [1] &quot;numeric&quot; Numbers generally treated as numeric -&gt; can include decimals 2.3.2 Integer integer allows only whole numbers -&gt; can force numbers into this form with as.integer() this will truncate the decimal (cut it off), not round as.integer(8.8) ## [1] 8 integer_variable &lt;- as.integer(8.8) integer_variable ## [1] 8 class(integer_variable) ## [1] &quot;integer&quot; 2.3.3 Character character is text, always enclosed in either double or single quotation marks class(&quot;hello&quot;) ## [1] &quot;character&quot; Uncomment the following line by deleting the hashtag (#). Check out the error here  it may sound confusing but try to identify what it is telling you. my_word &lt;- &quot;hello&quot; class(my_word) ## [1] &quot;character&quot; #my_word + 2 If you forget the quotes, youll also get an error (have to remove the comment character here to see it!) 2.3.4 Logical logical can be either TRUE or FALSE, nothing else. test if something is identical with == test if something is not identical with != test if something is greater than with &gt; or less than with &lt; or try greater than or equals to &gt;= or less than or equal to with &lt;= 7 &lt; 8 ## [1] TRUE &quot;dog&quot; == &quot;dogs&quot; ## [1] FALSE 8.8 &gt;= 5.6 ## [1] TRUE &quot;seven&quot; == 7 ## [1] FALSE class(&quot;seven&quot; == 7) ## [1] &quot;logical&quot; 2.3.5 Factor factor - string variables that should be treated as categories / distinct levels of a grouping -&gt; will become more relevant when we work with datasets Allows you to represent text as group labels, that multiple items can belong to fav_flavors &lt;- c(&quot;chocolate&quot;, &quot;vanilla&quot;, &quot;strawberry&quot;, &quot;strawberry&quot;, &quot;chocolate&quot;, &quot;mint chocolate chip&quot;, &quot;chocolate&quot;, &quot;vanilla&quot;, &quot;strawberry&quot;, &quot;chocolate&quot;) class(fav_flavors) ## [1] &quot;character&quot; summary(fav_flavors) ## Length Class Mode ## 10 character character Change to factor with as.factor() fav_flavors &lt;- as.factor(fav_flavors) class(fav_flavors) ## [1] &quot;factor&quot; summary(fav_flavors) ## chocolate mint chocolate chip strawberry vanilla ## 4 1 3 2 Can also see the possible groupings of a factor using levels() levels(fav_flavors) ## [1] &quot;chocolate&quot; &quot;mint chocolate chip&quot; &quot;strawberry&quot; ## [4] &quot;vanilla&quot; 2.3.5.1 Try it out Assign your name to the variable my_name. What data type is the variable? Try the command nchar() on your name variable. What does it do? Try also toupper(). What does nchar(my_name) &gt;= 4 return? What does this mean? Bonus: What does TRUE == 1 return? What about FALSE == 1? Try them both with 0 too. What does this tell you about how R deals with logical variables? 2.4 (4) Packages 2.4.1 Installing packages Packages - extend basic R functions to add more complicated/specialized functionality CRAN: R Consortiums host for packages  any advanced R-programmer can make and submit their packages, any R-user can download and use them Install packages once when you first use them command in console (or Markdown): install.packages(\"packagename\") or use the panel at the lower right, under the Packages tab Try it now with one of the most used packages by copying the following code into your console install.packages(\"tidyverse\") 2.4.2 Using packages library() command at beginning of script to use calls from that package  will only work if youve already installed the package Good style: load all packages in first code block Error about not finding a package? You probably dont have it installed. library(tidyverse) ## -- Attaching packages --------------------------------------- tidyverse 1.3.1 -- ## v ggplot2 3.3.5 v purrr 0.3.4 ## v tibble 3.1.6 v dplyr 1.0.7 ## v tidyr 1.1.4 v stringr 1.4.0 ## v readr 2.1.1 v forcats 0.5.1 ## -- Conflicts ------------------------------------------ tidyverse_conflicts() -- ## x dplyr::filter() masks stats::filter() ## x dplyr::lag() masks stats::lag() In summary: You need to install a package once, but need to load it (using the library command) every time you start a new R session. 2.4.2.1 Try it out Try the following command: #beep(2) What error message do you get? Now install the package beepr and call the package to this session with a library call somewhere above the beep command (line above is enough.) Try running the command again (make sure your speakers are on  but not too loud :D) Install and -load- the cowsay package and try the following command: #say(what = &quot;Good luck learning R!&quot;, by = &quot;chicken&quot;) 2.5 (5) Reading in data What type of file are you working with? Excel: go to File -&gt; Save As and select either comma-separated values (csv) or tab-separated values (tsv) Or: open the file in a text editor to see what is used to separate the columns Where is the file saved? working directory: the location that R should start looking for files  setwd() ex: setwd(~Users/kyla/Documents...) or setwd(C:/Documents...) can also use Session -&gt; Set Working Directory -&gt; Choose Directory R-Markdown automatically sets the working directory to the folder youre in once youve set the working directory: can use files with just their short names (experiment_data.csv) can use data in a folder (data/experiment_data.csv) can use ../ to go backwards one folder Read in the file: base-R: read.csv() and read.tsv() tidyverse (improvements, reads as tibble instead of dataframe): read_csv() and read_tsv() must have tidyverse installed and loaded with a library() call note: read_csv2() for csv files in languages that use a comma as a decimal separator and thus a semicolon as a csv separator alternatively: read_delim(file, delim = ) Save the output to a variable. jump_data &lt;- read_csv(&quot;jump.csv&quot;) ## Rows: 8 Columns: 3 ## -- Column specification -------------------------------------------------------- ## Delimiter: &quot;,&quot; ## chr (1): participant ## dbl (2): height_cm, jump_height ## ## i Use `spec()` to retrieve the full column specification for this data. ## i Specify the column types or set `show_col_types = FALSE` to quiet this message. jump_data &lt;- read_delim(&quot;jump.csv&quot;, delim = &quot;,&quot;) ## Rows: 8 Columns: 3 ## -- Column specification -------------------------------------------------------- ## Delimiter: &quot;,&quot; ## chr (1): participant ## dbl (2): height_cm, jump_height ## ## i Use `spec()` to retrieve the full column specification for this data. ## i Specify the column types or set `show_col_types = FALSE` to quiet this message. 2.6 (6) Exploring your data Now you have a data file read in, but how do you see whats in it? head(): shows first six rows head(jump_data) ## # A tibble: 6 x 3 ## participant height_cm jump_height ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 A 170 51 ## 2 B 165 46 ## 3 C 167 40 ## 4 D 159 45 ## 5 E 182 62 ## 6 F 174 50 Can change the amount of rows with the n argument head(jump_data, n=3) ## # A tibble: 3 x 3 ## participant height_cm jump_height ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 A 170 51 ## 2 B 165 46 ## 3 C 167 40 Or: click name of dataframe in Environment tab - can also sort columns and Filter rows  just for viewing purposes - bit slow if you start having huge dataframes but often a good first look summary(): call it on a dataframe to get each column and useful info based on the data type. For example, numeric columns will show the min, median, max and the quartiles (25% increments). summary(jump_data) ## participant height_cm jump_height ## Length:8 Min. :159.0 Min. :31.00 ## Class :character 1st Qu.:164.2 1st Qu.:39.50 ## Mode :character Median :166.0 Median :45.50 ## Mean :168.0 Mean :45.38 ## 3rd Qu.:171.0 3rd Qu.:50.25 ## Max. :182.0 Max. :62.00 2.6.0.1 Try it out Download the three penguin_data files and save them in the same location as this Markdown. They all contain the same data, but its saved in slightly different formats, so you need to read them each in with a different command. Make sure to save them to variables. Take a look at your dataframe in the Environment tab. Try the command colnames() on the variable you saved the dataframe to. What does it do? We already tried the head() command, now try the tail() command. What does it do? 2.7 (7) Columns specific column call with dataframe_name$column_name R-Studio will helpfully suggest the column names as soon as it sees the $ jump_data$participant ## [1] &quot;A&quot; &quot;B&quot; &quot;C&quot; &quot;D&quot; &quot;E&quot; &quot;F&quot; &quot;G&quot; &quot;H&quot; jump_data$height_cm ## [1] 170 165 167 159 182 174 162 165 2.7.1 Descriptive stats Basic descriptive statistics for numeric columns  mean, median and range mean(jump_data$height_cm) ## [1] 168 range(jump_data$height_cm) ## [1] 159 182 median(jump_data$height_cm) ## [1] 166 summary(jump_data$height_cm) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 159.0 164.2 166.0 168.0 171.0 182.0 2.7.1.1 Try it out Use the penguin dataset. What is the range of flipper lengths? Save the mean body mass to a variable called average_bodymass. This number is in grams. What would the equivalent be in kilograms? Hint: Divide by 1000. 2.7.2 Categorical columns The penguins data contains information on several different penguin species. But how many, exactly? Lets try to use summary to extract that information: penguins &lt;- read_tsv(&quot;penguin_data_3.txt&quot;) ## Rows: 344 Columns: 8 ## -- Column specification -------------------------------------------------------- ## Delimiter: &quot;\\t&quot; ## chr (3): species, island, sex ## dbl (5): bill_length_mm, bill_depth_mm, flipper_length_mm, body_mass_g, year ## ## i Use `spec()` to retrieve the full column specification for this data. ## i Specify the column types or set `show_col_types = FALSE` to quiet this message. summary(penguins$species) ## Length Class Mode ## 344 character character Summary on a character column shows that each entry is seen as different and not comparable. This is a character (the default for text data) But should be a factor Factors represent groups (participant, conditions, etc.) We can use class on a variable to have R show us which data type it is: class(penguins$species) ## [1] &quot;character&quot; class(penguins$bill_length_mm) ## [1] &quot;numeric&quot; Change a character column into a factor using as_factor() Overwrite the original column penguins$species &lt;- as_factor(penguins$species) class(penguins$species) ## [1] &quot;factor&quot; summary(penguins$species) ## Adelie Gentoo Chinstrap ## 152 124 68 Quick reference: check the environment tab upper-right 2.7.2.1 Try it out Which other variables in the penguins data should be factors? Change them using the same code we used above. How many entries from penguins who live on the Dream island are there? 2.8 (8) The pipe operator The pipe %&gt;% is a command from the magrittr package (which is included in tidyverse, so no need to load it explicitly). When the pipe is used, the output from the first line is automatically passed to the second line. Specifically, the output is used as the first argument of the next command. Use Control + Shift + M to automatically insert %&gt;% summary(penguins) ## species island bill_length_mm bill_depth_mm ## Adelie :152 Length:344 Min. :32.10 Min. :13.10 ## Gentoo :124 Class :character 1st Qu.:39.23 1st Qu.:15.60 ## Chinstrap: 68 Mode :character Median :44.45 Median :17.30 ## Mean :43.92 Mean :17.15 ## 3rd Qu.:48.50 3rd Qu.:18.70 ## Max. :59.60 Max. :21.50 ## NA&#39;s :2 NA&#39;s :2 ## flipper_length_mm body_mass_g sex year ## Min. :172.0 Min. :2700 Length:344 Min. :2007 ## 1st Qu.:190.0 1st Qu.:3550 Class :character 1st Qu.:2007 ## Median :197.0 Median :4050 Mode :character Median :2008 ## Mean :200.9 Mean :4202 Mean :2008 ## 3rd Qu.:213.0 3rd Qu.:4750 3rd Qu.:2009 ## Max. :231.0 Max. :6300 Max. :2009 ## NA&#39;s :2 NA&#39;s :2 # is equivalent to: penguins %&gt;% # the line break here is optional, but makes the code more readable summary() ## species island bill_length_mm bill_depth_mm ## Adelie :152 Length:344 Min. :32.10 Min. :13.10 ## Gentoo :124 Class :character 1st Qu.:39.23 1st Qu.:15.60 ## Chinstrap: 68 Mode :character Median :44.45 Median :17.30 ## Mean :43.92 Mean :17.15 ## 3rd Qu.:48.50 3rd Qu.:18.70 ## Max. :59.60 Max. :21.50 ## NA&#39;s :2 NA&#39;s :2 ## flipper_length_mm body_mass_g sex year ## Min. :172.0 Min. :2700 Length:344 Min. :2007 ## 1st Qu.:190.0 1st Qu.:3550 Class :character 1st Qu.:2007 ## Median :197.0 Median :4050 Mode :character Median :2008 ## Mean :200.9 Mean :4202 Mean :2008 ## 3rd Qu.:213.0 3rd Qu.:4750 3rd Qu.:2009 ## Max. :231.0 Max. :6300 Max. :2009 ## NA&#39;s :2 NA&#39;s :2 head(penguins, n = 4) ## # A tibble: 4 x 8 ## species island bill_length_mm bill_depth_mm flipper_length_~ body_mass_g sex ## &lt;fct&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 Adelie Torge~ 39.1 18.7 181 3750 male ## 2 Adelie Torge~ 39.5 17.4 186 3800 fema~ ## 3 Adelie Torge~ 40.3 18 195 3250 fema~ ## 4 Adelie Torge~ NA NA NA NA &lt;NA&gt; ## # ... with 1 more variable: year &lt;dbl&gt; # is equivalent to: penguins %&gt;% head(n = 4) ## # A tibble: 4 x 8 ## species island bill_length_mm bill_depth_mm flipper_length_~ body_mass_g sex ## &lt;fct&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 Adelie Torge~ 39.1 18.7 181 3750 male ## 2 Adelie Torge~ 39.5 17.4 186 3800 fema~ ## 3 Adelie Torge~ 40.3 18 195 3250 fema~ ## 4 Adelie Torge~ NA NA NA NA &lt;NA&gt; ## # ... with 1 more variable: year &lt;dbl&gt; 2.8.0.1 Try it out Look at the last three lines of the penguins data (hint: tail). Use the base R command, then try to rewrite it with the pipe %&gt;% 2.9 (9) Conclusion Installed R, R-Studio R-Markdown variables data types: numeric, integer, character, factor, vector installing &amp; loading packages reading in files looking at dataframes in R Next time: - tidyverse - rename columns - make new columns - reorder - filter based on condition - etc. 2.9.1 Reading As a follow-up to this tutorial, you might want to read chapters 3.3 - 3.9 in Navarro, Learning Statistics with R (p. 46 - 66). 2.10 Deplyr library(dplyr) library(readr) billboard100 &lt;- read_csv(&quot;charts.csv&quot;) ## Rows: 330087 Columns: 7 ## -- Column specification -------------------------------------------------------- ## Delimiter: &quot;,&quot; ## chr (2): song, artist ## dbl (4): rank, last-week, peak-rank, weeks-on-board ## date (1): date ## ## i Use `spec()` to retrieve the full column specification for this data. ## i Specify the column types or set `show_col_types = FALSE` to quiet this message. music_df = billboard100 %&gt;% select(date:artist, weeks_popular=&#39;weeks-on-board&#39;) music_df ## # A tibble: 330,087 x 5 ## date rank song artist weeks_popular ## &lt;date&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 2021-11-06 1 Easy On Me Adele 3 ## 2 2021-11-06 2 Stay The Kid LAROI &amp; Justin Bieber 16 ## 3 2021-11-06 3 Industry Baby Lil Nas X &amp; Jack Harlow 14 ## 4 2021-11-06 4 Fancy Like Walker Hayes 19 ## 5 2021-11-06 5 Bad Habits Ed Sheeran 18 ## 6 2021-11-06 6 Way 2 Sexy Drake Featuring Future &amp; Young ~ 8 ## 7 2021-11-06 7 Shivers Ed Sheeran 7 ## 8 2021-11-06 8 Good 4 U Olivia Rodrigo 24 ## 9 2021-11-06 9 Need To Know Doja Cat 20 ## 10 2021-11-06 10 Levitating Dua Lipa 56 ## # ... with 330,077 more rows library(lubridate) ## ## Attaching package: &#39;lubridate&#39; ## The following objects are masked from &#39;package:base&#39;: ## ## date, intersect, setdiff, union library(stringr) music_df.cleaned = music_df %&gt;% mutate(date = mdy(date), primary_artist = ifelse(str_detect(artist, &#39;Featuring&#39;), str_match(artist, &#39;(.*)\\\\sFeaturing&#39;)[,2], artist), featured_artist = str_match(artist, &#39;Featuring\\\\s(.*)&#39;)[,2]) ## Warning: All formats failed to parse. No formats found. library(tidyr) music_df.cleaned %&gt;% distinct(song, primary_artist, featured_artist) %&gt;% pivot_longer(2:3, names_to=&quot;artist_type&quot;, values_to=&quot;artist_name&quot;) %&gt;% filter(artist_name==&quot;Drake&quot;) %&gt;% count(artist_type) ## # A tibble: 2 x 2 ## artist_type n ## &lt;chr&gt; &lt;int&gt; ## 1 featured_artist 57 ## 2 primary_artist 166 music_df.cleaned %&gt;% filter(rank &lt;= 3) %&gt;% select(date, rank, song) %&gt;% pivot_wider(names_from=&quot;rank&quot;,values_from=&quot;song&quot;) ## Warning: Values are not uniquely identified; output will contain list-cols. ## * Use `values_fn = list` to suppress this warning. ## * Use `values_fn = length` to identify where the duplicates arise ## * Use `values_fn = {summary_fun}` to summarise duplicates ## # A tibble: 1 x 4 ## date `1` `2` `3` ## &lt;date&gt; &lt;list&gt; &lt;list&gt; &lt;list&gt; ## 1 NA &lt;chr [3,301]&gt; &lt;chr [3,301]&gt; &lt;chr [3,301]&gt; mtv_data = read_csv(&quot;mtv.csv&quot;) ## Rows: 2999 Columns: 6 ## -- Column specification -------------------------------------------------------- ## Delimiter: &quot;,&quot; ## chr (6): name, facebook, twitter, website, genre, mtv ## ## i Use `spec()` to retrieve the full column specification for this data. ## i Specify the column types or set `show_col_types = FALSE` to quiet this message. top5_genres = music_df.cleaned %&gt;% inner_join(mtv_data, by = c(&quot;primary_artist&quot; = &quot;name&quot;)) %&gt;% select(song, primary_artist, genre) %&gt;% filter(!is.na(genre)) %&gt;% distinct() %&gt;% count(genre) %&gt;% top_n(5) %&gt;% pull(genre) ## Selecting by n library(ggplot2) "],["data-manipulation.html", "Week 3 Data Manipulation 3.1 Data Manipulation Skills 3.2 Selecting Columns and Rows 3.3 Combining Columns and Rows 3.4 Basic Bar Plots", " Week 3 Data Manipulation Exploring hierarchy in the data visualization of order of data x and y , both are numeric barplot spider plot or radar word cloud parallel plot lollipop plot circular barplot 3.1 Data Manipulation Skills setwd(&quot;C:/Users/Hello People/Desktop/AMA SY 21-22 2ND SEM/datanal&quot;) # to set working directory getwd() # to see which is our working directory ## [1] &quot;C:/Users/Hello People/Desktop/AMA SY 21-22 2ND SEM/datanal&quot; 3.1.1 reading data from CSV or excel file #read.csv() function df= read.csv(&quot;iris.csv&quot;) head(df) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3.0 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5.0 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa summary(df) ## Sepal.Length Sepal.Width Petal.Length Petal.Width ## Min. :4.300 Min. :2.000 Min. :1.000 Min. :0.100 ## 1st Qu.:5.100 1st Qu.:2.800 1st Qu.:1.600 1st Qu.:0.300 ## Median :5.800 Median :3.000 Median :4.350 Median :1.300 ## Mean :5.843 Mean :3.057 Mean :3.758 Mean :1.199 ## 3rd Qu.:6.400 3rd Qu.:3.300 3rd Qu.:5.100 3rd Qu.:1.800 ## Max. :7.900 Max. :4.400 Max. :6.900 Max. :2.500 ## Species ## Length:150 ## Class :character ## Mode :character ## ## ## str(df) ## &#39;data.frame&#39;: 150 obs. of 5 variables: ## $ Sepal.Length: num 5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ... ## $ Sepal.Width : num 3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ... ## $ Petal.Length: num 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ... ## $ Petal.Width : num 0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ... ## $ Species : chr &quot;setosa&quot; &quot;setosa&quot; &quot;setosa&quot; &quot;setosa&quot; ... #read.xlsx() function df1= readxl::read_xlsx(&quot;iris.xlsx&quot;) head(df1) ## # A tibble: 6 x 5 ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa summary(df1) ## Sepal.Length Sepal.Width Petal.Length Petal.Width ## Min. :4.300 Min. :2.000 Min. :1.000 Min. :0.100 ## 1st Qu.:5.100 1st Qu.:2.800 1st Qu.:1.600 1st Qu.:0.300 ## Median :5.800 Median :3.000 Median :4.350 Median :1.300 ## Mean :5.843 Mean :3.057 Mean :3.758 Mean :1.199 ## 3rd Qu.:6.400 3rd Qu.:3.300 3rd Qu.:5.100 3rd Qu.:1.800 ## Max. :7.900 Max. :4.400 Max. :6.900 Max. :2.500 ## Species ## Length:150 ## Class :character ## Mode :character ## ## ## str(df1) ## tibble [150 x 5] (S3: tbl_df/tbl/data.frame) ## $ Sepal.Length: num [1:150] 5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ... ## $ Sepal.Width : num [1:150] 3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ... ## $ Petal.Length: num [1:150] 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ... ## $ Petal.Width : num [1:150] 0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ... ## $ Species : chr [1:150] &quot;setosa&quot; &quot;setosa&quot; &quot;setosa&quot; &quot;setosa&quot; ... # if your data is in specific sheet of excel workbook df2= readxl::read_xlsx(&quot;iris.xlsx&quot;,sheet=&quot;iris&quot;) head(df2) ## # A tibble: 6 x 5 ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa summary(df2) ## Sepal.Length Sepal.Width Petal.Length Petal.Width ## Min. :4.300 Min. :2.000 Min. :1.000 Min. :0.100 ## 1st Qu.:5.100 1st Qu.:2.800 1st Qu.:1.600 1st Qu.:0.300 ## Median :5.800 Median :3.000 Median :4.350 Median :1.300 ## Mean :5.843 Mean :3.057 Mean :3.758 Mean :1.199 ## 3rd Qu.:6.400 3rd Qu.:3.300 3rd Qu.:5.100 3rd Qu.:1.800 ## Max. :7.900 Max. :4.400 Max. :6.900 Max. :2.500 ## Species ## Length:150 ## Class :character ## Mode :character ## ## ## str(df2) ## tibble [150 x 5] (S3: tbl_df/tbl/data.frame) ## $ Sepal.Length: num [1:150] 5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ... ## $ Sepal.Width : num [1:150] 3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ... ## $ Petal.Length: num [1:150] 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ... ## $ Petal.Width : num [1:150] 0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ... ## $ Species : chr [1:150] &quot;setosa&quot; &quot;setosa&quot; &quot;setosa&quot; &quot;setosa&quot; ... 3.2 Selecting Columns and Rows # for the function below we need tidyverse package library(tidyverse) # Selecting column df_f4= select(df,-5) head(df_f4) ## Sepal.Length Sepal.Width Petal.Length Petal.Width ## 1 5.1 3.5 1.4 0.2 ## 2 4.9 3.0 1.4 0.2 ## 3 4.7 3.2 1.3 0.2 ## 4 4.6 3.1 1.5 0.2 ## 5 5.0 3.6 1.4 0.2 ## 6 5.4 3.9 1.7 0.4 # filtering rows df_setosa= filter(df,Species==&quot;setosa&quot;) head(df_setosa) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3.0 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5.0 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa dim(df_setosa) ## [1] 50 5 df_virginica= filter(df,Species==&quot;virginica&quot;) head(df_virginica) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 6.3 3.3 6.0 2.5 virginica ## 2 5.8 2.7 5.1 1.9 virginica ## 3 7.1 3.0 5.9 2.1 virginica ## 4 6.3 2.9 5.6 1.8 virginica ## 5 6.5 3.0 5.8 2.2 virginica ## 6 7.6 3.0 6.6 2.1 virginica dim(df_virginica) ## [1] 50 5 3.3 Combining Columns and Rows # gathering columns to make long table df_long= gather(df,Mes_type,length,1:4) head(df_long) ## Species Mes_type length ## 1 setosa Sepal.Length 5.1 ## 2 setosa Sepal.Length 4.9 ## 3 setosa Sepal.Length 4.7 ## 4 setosa Sepal.Length 4.6 ## 5 setosa Sepal.Length 5.0 ## 6 setosa Sepal.Length 5.4 #grouping and summarizing data # group by df_sumzd=group_by(df_long,Species) head(df_sumzd) ## # A tibble: 6 x 3 ## # Groups: Species [1] ## Species Mes_type length ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 setosa Sepal.Length 5.1 ## 2 setosa Sepal.Length 4.9 ## 3 setosa Sepal.Length 4.7 ## 4 setosa Sepal.Length 4.6 ## 5 setosa Sepal.Length 5 ## 6 setosa Sepal.Length 5.4 #Summarize df_sumzd=group_by(df_long,Species,Mes_type) %&gt;% summarise(mean=mean(length),sd=sd(length)) ## `summarise()` has grouped output by &#39;Species&#39;. You can override using the `.groups` argument. head(df_sumzd) ## # A tibble: 6 x 4 ## # Groups: Species [2] ## Species Mes_type mean sd ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 setosa Petal.Length 1.46 0.174 ## 2 setosa Petal.Width 0.246 0.105 ## 3 setosa Sepal.Length 5.01 0.352 ## 4 setosa Sepal.Width 3.43 0.379 ## 5 versicolor Petal.Length 4.26 0.470 ## 6 versicolor Petal.Width 1.33 0.198 3.4 Basic Bar Plots #p=ggplot(df_sumzd,aes(x=Species,y=mean))+geom_bar() #p # Plot basic barplot- effect of stat= &quot;identity&quot; p=ggplot(df_sumzd,aes(x=Species,y=mean))+ geom_bar(stat=&quot;identity&quot;) p # fill color p=ggplot(df_sumzd,aes(x=Species,y=mean))+ geom_bar(stat=&quot;identity&quot;,fill=&quot;red&quot;) p p=ggplot(df_sumzd,aes(x=Species,y=mean, fill=Species))+ geom_bar(stat=&quot;identity&quot;) p # Fill Color - mapping to a variable # fill colors- stacked bar plot p=ggplot(df_sumzd,aes(x=Species,y=mean,fill=Mes_type))+ geom_bar(stat=&quot;identity&quot;) p # fill colors- grouped bar plot p=ggplot(df_sumzd,aes(x=Species,y=mean,fill=Mes_type))+ geom_bar(stat=&quot;identity&quot;,position=&quot;dodge&quot;) p #Error bars p=ggplot(df_sumzd,aes(x=Species,y=mean,fill=Mes_type))+ geom_bar(stat=&quot;identity&quot;,position=&quot;dodge&quot;) + geom_errorbar(aes(ymin=mean-sd,ymax=mean+sd)) p #Error bars width p=ggplot(df_sumzd,aes(x=Species,y=mean,fill=Mes_type))+ geom_bar(stat=&quot;identity&quot;,position=&quot;dodge&quot;) + geom_errorbar(aes(ymin=mean-sd,ymax=mean+sd),width=0.25) p #Error bars width, size,position p=ggplot(df_sumzd,aes(x=Species,y=mean,fill=Mes_type))+ geom_bar(stat=&quot;identity&quot;,position=&quot;dodge&quot;) + geom_errorbar(aes(ymin=mean-sd,ymax=mean+sd),width=0.25, size=1,position= position_dodge(0.9)) p #Error bars width,size, position, alpha p=ggplot(df_sumzd,aes(x=Species,y=mean,fill=Mes_type))+ geom_bar(stat=&quot;identity&quot;,position=&quot;dodge&quot;) + geom_errorbar(aes(ymin=mean-sd,ymax=mean+sd),width=0.25, size=1,position= position_dodge(0.9),alpha=0.3) p #Error bars width,size, position, alpha and labels p=ggplot(df_sumzd,aes(x=Species,y=mean,fill=Mes_type,label=mean))+ geom_bar(stat=&quot;identity&quot;,position=&quot;dodge&quot;) + geom_errorbar(aes(ymin=mean-sd,ymax=mean+sd),width=0.25, size=1,position= position_dodge(0.9), alpha=0.3) p #Error bars width,size, position, alpha and labels p=ggplot(df_sumzd,aes(x=Species,y=mean,fill=Mes_type,label=mean))+ geom_bar(stat=&quot;identity&quot;,position=&quot;dodge&quot;) + geom_errorbar(aes(ymin=mean-sd,ymax=mean+sd),width=0.25, size=1,position= position_dodge(0.9), alpha=0.3)+ geom_text(position=position_dodge(0.9)) p #Error bars width,size, position, alpha and labels, label position corrected p=ggplot(df_sumzd,aes(x=Species,y=mean,fill=Mes_type,label=mean))+ geom_bar(stat=&quot;identity&quot;,position=&quot;dodge&quot;) + geom_errorbar(aes(ymin=mean-sd,ymax=mean+sd),width=0.25, size=1,position= position_dodge(0.9), alpha=0.3)+ geom_text(position=position_dodge(0.9),vjust=-1) p #Error bars width,size, position, alpha and labels, label position more corrected p=ggplot(df_sumzd,aes(x=Species,y=mean,fill=Mes_type,label=mean))+ geom_bar(stat=&quot;identity&quot;,position=&quot;dodge&quot;) + geom_errorbar(aes(ymin=mean-sd,ymax=mean+sd),width=0.25, size=1,position= position_dodge(0.9), alpha=0.3)+ geom_text(position=position_dodge(0.9),vjust=-0.5, hjust=1.2) p #theme classic p=ggplot(df_sumzd,aes(x=Species,y=mean,fill=Mes_type,label=mean))+ geom_bar(stat=&quot;identity&quot;,position=&quot;dodge&quot;) + geom_errorbar(aes(ymin=mean-sd,ymax=mean+sd),width=0.25, size=1,position= position_dodge(0.9), alpha=0.3)+ geom_text(position=position_dodge(0.9),vjust=-0.5, hjust=1)+ theme_classic() p #theme bw p=ggplot(df_sumzd,aes(x=Species,y=mean,fill=Mes_type,label=mean))+ geom_bar(stat=&quot;identity&quot;,position=&quot;dodge&quot;) + geom_errorbar(aes(ymin=mean-sd,ymax=mean+sd),width=0.25, size=1,position= position_dodge(0.9), alpha=0.3)+ geom_text(position=position_dodge(0.9),vjust=-0.5, hjust=1.1)+ theme_bw() p # I don&#39;t like this plot. p=ggplot(df_sumzd,aes(x=Species,y=mean,fill=Mes_type))+ geom_bar(stat=&quot;identity&quot;,position=&quot;dodge&quot;) + geom_errorbar(aes(ymin=mean-sd,ymax=mean+sd),width=0.25, size=1,position= position_dodge(0.9), alpha=0.3)+ theme_bw() p # coord flip, this to when x axis labels are very long and overlap each other p=ggplot(df_sumzd,aes(x=Species,y=mean,fill=Mes_type))+ geom_bar(stat=&quot;identity&quot;,position=&quot;dodge&quot;) + geom_errorbar(aes(ymin=mean-sd,ymax=mean+sd),width=0.25, size=1,position= position_dodge(0.9), alpha=0.3)+ theme_bw()+ coord_flip() p #Thats it for bar plot. "],["descriptive-statistics-using-r.html", "Week 4 Descriptive Statistics Using R", " Week 4 Descriptive Statistics Using R "],["testing-hypothesis.html", "Week 5 Testing Hypothesis 5.1 Test 1. Pearson Correlation Test 5.2 T-Test 5.3 Chi-Square Test 5.4 ANOVA", " Week 5 Testing Hypothesis 5.1 Test 1. Pearson Correlation Test 5.2 T-Test 5.3 Chi-Square Test 5.4 ANOVA "],["other-parametric-tests.html", "Week 6 Other Parametric Tests", " Week 6 Other Parametric Tests "],["non-parametic-tests.html", "Week 7 Non-Parametic Tests", " Week 7 Non-Parametic Tests "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
