[["index.html", "MATH6200 About", " MATH6200 Dennis E. Cabais 2022-03-12 About "],["data-in-r.html", "Week 1 Data in R 1.1 Creating Data in R 1.2 Importing Data to R", " Week 1 Data in R 1.1 Creating Data in R # Data creation sex &lt;-c(&quot;M&quot;,&quot;F&quot;,&quot;M&quot;,&quot;F&quot;,&quot;M&quot;,&quot;F&quot;,&quot;M&quot;,&quot;F&quot;,&quot;M&quot;,&quot;F&quot;) math &lt;-c(85,90, 88,90,99,87,88,79,80,10) english &lt;-c(80, 90,87,78,79,90,99,90,80,88) # data frame data1.data &lt;- data.frame(sex,math,english) #vaccine &lt;- read.csv(&quot;paste&quot;) head(data1.data,10) ## sex math english ## 1 M 85 80 ## 2 F 90 90 ## 3 M 88 87 ## 4 F 90 78 ## 5 M 99 79 ## 6 F 87 90 ## 7 M 88 99 ## 8 F 79 90 ## 9 M 80 80 ## 10 F 10 88 tail(data1.data) ## sex math english ## 5 M 99 79 ## 6 F 87 90 ## 7 M 88 99 ## 8 F 79 90 ## 9 M 80 80 ## 10 F 10 88 min(data1.data$math) ## [1] 10 max(data1.data$english) ## [1] 99 1.2 Importing Data to R 1.2.1 Importing from excel file 1.2.2 Importing from webpage 1.2.3 Importing from csv file "],["data-cleaning-wrangling.html", "Week 2 Data Cleaning / Wrangling", " Week 2 Data Cleaning / Wrangling library(dplyr) ## ## Attaching package: &#39;dplyr&#39; ## The following objects are masked from &#39;package:stats&#39;: ## ## filter, lag ## The following objects are masked from &#39;package:base&#39;: ## ## intersect, setdiff, setequal, union library(readr) billboard100 &lt;- read_csv(&quot;charts.csv&quot;) ## Rows: 330087 Columns: 7 ## -- Column specification -------------------------------------------------------- ## Delimiter: &quot;,&quot; ## chr (2): song, artist ## dbl (4): rank, last-week, peak-rank, weeks-on-board ## date (1): date ## ## i Use `spec()` to retrieve the full column specification for this data. ## i Specify the column types or set `show_col_types = FALSE` to quiet this message. music_df = billboard100 %&gt;% select(date:artist, weeks_popular=&#39;weeks-on-board&#39;) music_df ## # A tibble: 330,087 x 5 ## date rank song artist weeks_popular ## &lt;date&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 2021-11-06 1 Easy On Me Adele 3 ## 2 2021-11-06 2 Stay The Kid LAROI &amp; Justin Bieber 16 ## 3 2021-11-06 3 Industry Baby Lil Nas X &amp; Jack Harlow 14 ## 4 2021-11-06 4 Fancy Like Walker Hayes 19 ## 5 2021-11-06 5 Bad Habits Ed Sheeran 18 ## 6 2021-11-06 6 Way 2 Sexy Drake Featuring Future &amp; Young ~ 8 ## 7 2021-11-06 7 Shivers Ed Sheeran 7 ## 8 2021-11-06 8 Good 4 U Olivia Rodrigo 24 ## 9 2021-11-06 9 Need To Know Doja Cat 20 ## 10 2021-11-06 10 Levitating Dua Lipa 56 ## # ... with 330,077 more rows library(lubridate) ## ## Attaching package: &#39;lubridate&#39; ## The following objects are masked from &#39;package:base&#39;: ## ## date, intersect, setdiff, union library(stringr) music_df.cleaned = music_df %&gt;% mutate(date = mdy(date), primary_artist = ifelse(str_detect(artist, &#39;Featuring&#39;), str_match(artist, &#39;(.*)\\\\sFeaturing&#39;)[,2], artist), featured_artist = str_match(artist, &#39;Featuring\\\\s(.*)&#39;)[,2]) ## Warning: All formats failed to parse. No formats found. library(tidyr) music_df.cleaned %&gt;% distinct(song, primary_artist, featured_artist) %&gt;% pivot_longer(2:3, names_to=&quot;artist_type&quot;, values_to=&quot;artist_name&quot;) %&gt;% filter(artist_name==&quot;Drake&quot;) %&gt;% count(artist_type) ## # A tibble: 2 x 2 ## artist_type n ## &lt;chr&gt; &lt;int&gt; ## 1 featured_artist 57 ## 2 primary_artist 166 music_df.cleaned %&gt;% filter(rank &lt;= 3) %&gt;% select(date, rank, song) %&gt;% pivot_wider(names_from=&quot;rank&quot;,values_from=&quot;song&quot;) ## Warning: Values are not uniquely identified; output will contain list-cols. ## * Use `values_fn = list` to suppress this warning. ## * Use `values_fn = length` to identify where the duplicates arise ## * Use `values_fn = {summary_fun}` to summarise duplicates ## # A tibble: 1 x 4 ## date `1` `2` `3` ## &lt;date&gt; &lt;list&gt; &lt;list&gt; &lt;list&gt; ## 1 NA &lt;chr [3,301]&gt; &lt;chr [3,301]&gt; &lt;chr [3,301]&gt; mtv_data = read_csv(&quot;mtv.csv&quot;) ## Rows: 2999 Columns: 6 ## -- Column specification -------------------------------------------------------- ## Delimiter: &quot;,&quot; ## chr (6): name, facebook, twitter, website, genre, mtv ## ## i Use `spec()` to retrieve the full column specification for this data. ## i Specify the column types or set `show_col_types = FALSE` to quiet this message. top5_genres = music_df.cleaned %&gt;% inner_join(mtv_data, by = c(&quot;primary_artist&quot; = &quot;name&quot;)) %&gt;% select(song, primary_artist, genre) %&gt;% filter(!is.na(genre)) %&gt;% distinct() %&gt;% count(genre) %&gt;% top_n(5) %&gt;% pull(genre) ## Selecting by n library(ggplot2) "],["week-4.html", "Week 3 Week 4", " Week 3 Week 4 "],["week-5.html", "Week 4 Week 5", " Week 4 Week 5 "],["week-6.html", "Week 5 Week 6", " Week 5 Week 6 "],["week-7.html", "Week 6 Week 7", " Week 6 Week 7 "],["week-8.html", "Week 7 Week 8", " Week 7 Week 8 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
