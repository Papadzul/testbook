[["index.html", "MATH6200 About", " MATH6200 Dennis E. Cabais 2022-03-12 About "],["data-in-r.html", "Week 1 Data in R 1.1 Creating Data in R 1.2 Importing Data to R", " Week 1 Data in R 1.1 Creating Data in R # Data creation sex &lt;-c(&quot;M&quot;,&quot;F&quot;,&quot;M&quot;,&quot;F&quot;,&quot;M&quot;,&quot;F&quot;,&quot;M&quot;,&quot;F&quot;,&quot;M&quot;,&quot;F&quot;) math &lt;-c(85,90, 88,90,99,87,88,79,80,10) english &lt;-c(80, 90,87,78,79,90,99,90,80,88) # data frame data1.data &lt;- data.frame(sex,math,english) #vaccine &lt;- read.csv(&quot;paste&quot;) head(data1.data,10) ## sex math english ## 1 M 85 80 ## 2 F 90 90 ## 3 M 88 87 ## 4 F 90 78 ## 5 M 99 79 ## 6 F 87 90 ## 7 M 88 99 ## 8 F 79 90 ## 9 M 80 80 ## 10 F 10 88 tail(data1.data) ## sex math english ## 5 M 99 79 ## 6 F 87 90 ## 7 M 88 99 ## 8 F 79 90 ## 9 M 80 80 ## 10 F 10 88 min(data1.data$math) ## [1] 10 max(data1.data$english) ## [1] 99 1.2 Importing Data to R 1.2.1 Importing from excel file 1.2.2 Importing from webpage 1.2.3 Importing from csv file "],["data-cleaning-wrangling.html", "Week 2 Data Cleaning / Wrangling", " Week 2 Data Cleaning / Wrangling library(dplyr) ## ## Attaching package: &#39;dplyr&#39; ## The following objects are masked from &#39;package:stats&#39;: ## ## filter, lag ## The following objects are masked from &#39;package:base&#39;: ## ## intersect, setdiff, setequal, union library(readr) billboard100 &lt;- read_csv(&quot;charts.csv&quot;) ## Rows: 330087 Columns: 7 ## -- Column specification -------------------------------------------------------- ## Delimiter: &quot;,&quot; ## chr (2): song, artist ## dbl (4): rank, last-week, peak-rank, weeks-on-board ## date (1): date ## ## i Use `spec()` to retrieve the full column specification for this data. ## i Specify the column types or set `show_col_types = FALSE` to quiet this message. music_df = billboard100 %&gt;% select(date:artist, weeks_popular=&#39;weeks-on-board&#39;) music_df ## # A tibble: 330,087 x 5 ## date rank song artist weeks_popular ## &lt;date&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 2021-11-06 1 Easy On Me Adele 3 ## 2 2021-11-06 2 Stay The Kid LAROI &amp; Justin Bieber 16 ## 3 2021-11-06 3 Industry Baby Lil Nas X &amp; Jack Harlow 14 ## 4 2021-11-06 4 Fancy Like Walker Hayes 19 ## 5 2021-11-06 5 Bad Habits Ed Sheeran 18 ## 6 2021-11-06 6 Way 2 Sexy Drake Featuring Future &amp; Young ~ 8 ## 7 2021-11-06 7 Shivers Ed Sheeran 7 ## 8 2021-11-06 8 Good 4 U Olivia Rodrigo 24 ## 9 2021-11-06 9 Need To Know Doja Cat 20 ## 10 2021-11-06 10 Levitating Dua Lipa 56 ## # ... with 330,077 more rows library(lubridate) ## ## Attaching package: &#39;lubridate&#39; ## The following objects are masked from &#39;package:base&#39;: ## ## date, intersect, setdiff, union library(stringr) music_df.cleaned = music_df %&gt;% mutate(date = mdy(date), primary_artist = ifelse(str_detect(artist, &#39;Featuring&#39;), str_match(artist, &#39;(.*)\\\\sFeaturing&#39;)[,2], artist), featured_artist = str_match(artist, &#39;Featuring\\\\s(.*)&#39;)[,2]) ## Warning: All formats failed to parse. No formats found. library(tidyr) music_df.cleaned %&gt;% distinct(song, primary_artist, featured_artist) %&gt;% pivot_longer(2:3, names_to=&quot;artist_type&quot;, values_to=&quot;artist_name&quot;) %&gt;% filter(artist_name==&quot;Drake&quot;) %&gt;% count(artist_type) ## # A tibble: 2 x 2 ## artist_type n ## &lt;chr&gt; &lt;int&gt; ## 1 featured_artist 57 ## 2 primary_artist 166 music_df.cleaned %&gt;% filter(rank &lt;= 3) %&gt;% select(date, rank, song) %&gt;% pivot_wider(names_from=&quot;rank&quot;,values_from=&quot;song&quot;) ## Warning: Values are not uniquely identified; output will contain list-cols. ## * Use `values_fn = list` to suppress this warning. ## * Use `values_fn = length` to identify where the duplicates arise ## * Use `values_fn = {summary_fun}` to summarise duplicates ## # A tibble: 1 x 4 ## date `1` `2` `3` ## &lt;date&gt; &lt;list&gt; &lt;list&gt; &lt;list&gt; ## 1 NA &lt;chr [3,301]&gt; &lt;chr [3,301]&gt; &lt;chr [3,301]&gt; mtv_data = read_csv(&quot;mtv.csv&quot;) ## Rows: 2999 Columns: 6 ## -- Column specification -------------------------------------------------------- ## Delimiter: &quot;,&quot; ## chr (6): name, facebook, twitter, website, genre, mtv ## ## i Use `spec()` to retrieve the full column specification for this data. ## i Specify the column types or set `show_col_types = FALSE` to quiet this message. top5_genres = music_df.cleaned %&gt;% inner_join(mtv_data, by = c(&quot;primary_artist&quot; = &quot;name&quot;)) %&gt;% select(song, primary_artist, genre) %&gt;% filter(!is.na(genre)) %&gt;% distinct() %&gt;% count(genre) %&gt;% top_n(5) %&gt;% pull(genre) ## Selecting by n library(ggplot2) "],["data-manipulation.html", "Week 3 Data Manipulation 3.1 Data Manipulation Skills 3.2 Selecting Columns and Rows 3.3 Combining Columns and Rows 3.4 Basic Bar Plots", " Week 3 Data Manipulation Exploring hierarchy in the data visualization of order of data x and y , both are numeric barplot spider plot or radar word cloud parallel plot lollipop plot circular barplot 3.1 Data Manipulation Skills setwd(&quot;C:/Users/Hello People/Desktop/AMA SY 21-22 2ND SEM/datanal&quot;) # to set working directory getwd() # to see which is our working directory ## [1] &quot;C:/Users/Hello People/Desktop/AMA SY 21-22 2ND SEM/datanal&quot; 3.1.1 reading data from CSV or excel file #read.csv() function df= read.csv(&quot;iris.csv&quot;) head(df) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3.0 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5.0 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa summary(df) ## Sepal.Length Sepal.Width Petal.Length Petal.Width ## Min. :4.300 Min. :2.000 Min. :1.000 Min. :0.100 ## 1st Qu.:5.100 1st Qu.:2.800 1st Qu.:1.600 1st Qu.:0.300 ## Median :5.800 Median :3.000 Median :4.350 Median :1.300 ## Mean :5.843 Mean :3.057 Mean :3.758 Mean :1.199 ## 3rd Qu.:6.400 3rd Qu.:3.300 3rd Qu.:5.100 3rd Qu.:1.800 ## Max. :7.900 Max. :4.400 Max. :6.900 Max. :2.500 ## Species ## Length:150 ## Class :character ## Mode :character ## ## ## str(df) ## &#39;data.frame&#39;: 150 obs. of 5 variables: ## $ Sepal.Length: num 5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ... ## $ Sepal.Width : num 3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ... ## $ Petal.Length: num 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ... ## $ Petal.Width : num 0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ... ## $ Species : chr &quot;setosa&quot; &quot;setosa&quot; &quot;setosa&quot; &quot;setosa&quot; ... #read.xlsx() function df1= readxl::read_xlsx(&quot;iris.xlsx&quot;) head(df1) ## # A tibble: 6 x 5 ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa summary(df1) ## Sepal.Length Sepal.Width Petal.Length Petal.Width ## Min. :4.300 Min. :2.000 Min. :1.000 Min. :0.100 ## 1st Qu.:5.100 1st Qu.:2.800 1st Qu.:1.600 1st Qu.:0.300 ## Median :5.800 Median :3.000 Median :4.350 Median :1.300 ## Mean :5.843 Mean :3.057 Mean :3.758 Mean :1.199 ## 3rd Qu.:6.400 3rd Qu.:3.300 3rd Qu.:5.100 3rd Qu.:1.800 ## Max. :7.900 Max. :4.400 Max. :6.900 Max. :2.500 ## Species ## Length:150 ## Class :character ## Mode :character ## ## ## str(df1) ## tibble [150 x 5] (S3: tbl_df/tbl/data.frame) ## $ Sepal.Length: num [1:150] 5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ... ## $ Sepal.Width : num [1:150] 3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ... ## $ Petal.Length: num [1:150] 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ... ## $ Petal.Width : num [1:150] 0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ... ## $ Species : chr [1:150] &quot;setosa&quot; &quot;setosa&quot; &quot;setosa&quot; &quot;setosa&quot; ... # if your data is in specific sheet of excel workbook df2= readxl::read_xlsx(&quot;iris.xlsx&quot;,sheet=&quot;iris&quot;) head(df2) ## # A tibble: 6 x 5 ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa summary(df2) ## Sepal.Length Sepal.Width Petal.Length Petal.Width ## Min. :4.300 Min. :2.000 Min. :1.000 Min. :0.100 ## 1st Qu.:5.100 1st Qu.:2.800 1st Qu.:1.600 1st Qu.:0.300 ## Median :5.800 Median :3.000 Median :4.350 Median :1.300 ## Mean :5.843 Mean :3.057 Mean :3.758 Mean :1.199 ## 3rd Qu.:6.400 3rd Qu.:3.300 3rd Qu.:5.100 3rd Qu.:1.800 ## Max. :7.900 Max. :4.400 Max. :6.900 Max. :2.500 ## Species ## Length:150 ## Class :character ## Mode :character ## ## ## str(df2) ## tibble [150 x 5] (S3: tbl_df/tbl/data.frame) ## $ Sepal.Length: num [1:150] 5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ... ## $ Sepal.Width : num [1:150] 3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ... ## $ Petal.Length: num [1:150] 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ... ## $ Petal.Width : num [1:150] 0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ... ## $ Species : chr [1:150] &quot;setosa&quot; &quot;setosa&quot; &quot;setosa&quot; &quot;setosa&quot; ... 3.2 Selecting Columns and Rows # for the function below we need tidyverse package library(tidyverse) ## -- Attaching packages --------------------------------------- tidyverse 1.3.1 -- ## v tibble 3.1.6 v forcats 0.5.1 ## v purrr 0.3.4 ## -- Conflicts ------------------------------------------ tidyverse_conflicts() -- ## x lubridate::as.difftime() masks base::as.difftime() ## x lubridate::date() masks base::date() ## x dplyr::filter() masks stats::filter() ## x lubridate::intersect() masks base::intersect() ## x dplyr::lag() masks stats::lag() ## x lubridate::setdiff() masks base::setdiff() ## x lubridate::union() masks base::union() # Selecting column df_f4= select(df,-5) head(df_f4) ## Sepal.Length Sepal.Width Petal.Length Petal.Width ## 1 5.1 3.5 1.4 0.2 ## 2 4.9 3.0 1.4 0.2 ## 3 4.7 3.2 1.3 0.2 ## 4 4.6 3.1 1.5 0.2 ## 5 5.0 3.6 1.4 0.2 ## 6 5.4 3.9 1.7 0.4 # filtering rows df_setosa= filter(df,Species==&quot;setosa&quot;) head(df_setosa) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3.0 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5.0 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa dim(df_setosa) ## [1] 50 5 df_virginica= filter(df,Species==&quot;virginica&quot;) head(df_virginica) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 6.3 3.3 6.0 2.5 virginica ## 2 5.8 2.7 5.1 1.9 virginica ## 3 7.1 3.0 5.9 2.1 virginica ## 4 6.3 2.9 5.6 1.8 virginica ## 5 6.5 3.0 5.8 2.2 virginica ## 6 7.6 3.0 6.6 2.1 virginica dim(df_virginica) ## [1] 50 5 3.3 Combining Columns and Rows # gathering columns to make long table df_long= gather(df,Mes_type,length,1:4) head(df_long) ## Species Mes_type length ## 1 setosa Sepal.Length 5.1 ## 2 setosa Sepal.Length 4.9 ## 3 setosa Sepal.Length 4.7 ## 4 setosa Sepal.Length 4.6 ## 5 setosa Sepal.Length 5.0 ## 6 setosa Sepal.Length 5.4 #grouping and summarizing data # group by df_sumzd=group_by(df_long,Species) head(df_sumzd) ## # A tibble: 6 x 3 ## # Groups: Species [1] ## Species Mes_type length ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 setosa Sepal.Length 5.1 ## 2 setosa Sepal.Length 4.9 ## 3 setosa Sepal.Length 4.7 ## 4 setosa Sepal.Length 4.6 ## 5 setosa Sepal.Length 5 ## 6 setosa Sepal.Length 5.4 #Summarize df_sumzd=group_by(df_long,Species,Mes_type) %&gt;% summarise(mean=mean(length),sd=sd(length)) ## `summarise()` has grouped output by &#39;Species&#39;. You can override using the `.groups` argument. head(df_sumzd) ## # A tibble: 6 x 4 ## # Groups: Species [2] ## Species Mes_type mean sd ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 setosa Petal.Length 1.46 0.174 ## 2 setosa Petal.Width 0.246 0.105 ## 3 setosa Sepal.Length 5.01 0.352 ## 4 setosa Sepal.Width 3.43 0.379 ## 5 versicolor Petal.Length 4.26 0.470 ## 6 versicolor Petal.Width 1.33 0.198 3.4 Basic Bar Plots #p=ggplot(df_sumzd,aes(x=Species,y=mean))+geom_bar() #p # Plot basic barplot- effect of stat= &quot;identity&quot; p=ggplot(df_sumzd,aes(x=Species,y=mean))+ geom_bar(stat=&quot;identity&quot;) p # fill color p=ggplot(df_sumzd,aes(x=Species,y=mean))+ geom_bar(stat=&quot;identity&quot;,fill=&quot;red&quot;) p p=ggplot(df_sumzd,aes(x=Species,y=mean, fill=Species))+ geom_bar(stat=&quot;identity&quot;) p # Fill Color - mapping to a variable # fill colors- stacked bar plot p=ggplot(df_sumzd,aes(x=Species,y=mean,fill=Mes_type))+ geom_bar(stat=&quot;identity&quot;) p # fill colors- grouped bar plot p=ggplot(df_sumzd,aes(x=Species,y=mean,fill=Mes_type))+ geom_bar(stat=&quot;identity&quot;,position=&quot;dodge&quot;) p #Error bars p=ggplot(df_sumzd,aes(x=Species,y=mean,fill=Mes_type))+ geom_bar(stat=&quot;identity&quot;,position=&quot;dodge&quot;) + geom_errorbar(aes(ymin=mean-sd,ymax=mean+sd)) p #Error bars width p=ggplot(df_sumzd,aes(x=Species,y=mean,fill=Mes_type))+ geom_bar(stat=&quot;identity&quot;,position=&quot;dodge&quot;) + geom_errorbar(aes(ymin=mean-sd,ymax=mean+sd),width=0.25) p #Error bars width, size,position p=ggplot(df_sumzd,aes(x=Species,y=mean,fill=Mes_type))+ geom_bar(stat=&quot;identity&quot;,position=&quot;dodge&quot;) + geom_errorbar(aes(ymin=mean-sd,ymax=mean+sd),width=0.25, size=1,position= position_dodge(0.9)) p #Error bars width,size, position, alpha p=ggplot(df_sumzd,aes(x=Species,y=mean,fill=Mes_type))+ geom_bar(stat=&quot;identity&quot;,position=&quot;dodge&quot;) + geom_errorbar(aes(ymin=mean-sd,ymax=mean+sd),width=0.25, size=1,position= position_dodge(0.9),alpha=0.3) p #Error bars width,size, position, alpha and labels p=ggplot(df_sumzd,aes(x=Species,y=mean,fill=Mes_type,label=mean))+ geom_bar(stat=&quot;identity&quot;,position=&quot;dodge&quot;) + geom_errorbar(aes(ymin=mean-sd,ymax=mean+sd),width=0.25, size=1,position= position_dodge(0.9), alpha=0.3) p #Error bars width,size, position, alpha and labels p=ggplot(df_sumzd,aes(x=Species,y=mean,fill=Mes_type,label=mean))+ geom_bar(stat=&quot;identity&quot;,position=&quot;dodge&quot;) + geom_errorbar(aes(ymin=mean-sd,ymax=mean+sd),width=0.25, size=1,position= position_dodge(0.9), alpha=0.3)+ geom_text(position=position_dodge(0.9)) p #Error bars width,size, position, alpha and labels, label position corrected p=ggplot(df_sumzd,aes(x=Species,y=mean,fill=Mes_type,label=mean))+ geom_bar(stat=&quot;identity&quot;,position=&quot;dodge&quot;) + geom_errorbar(aes(ymin=mean-sd,ymax=mean+sd),width=0.25, size=1,position= position_dodge(0.9), alpha=0.3)+ geom_text(position=position_dodge(0.9),vjust=-1) p #Error bars width,size, position, alpha and labels, label position more corrected p=ggplot(df_sumzd,aes(x=Species,y=mean,fill=Mes_type,label=mean))+ geom_bar(stat=&quot;identity&quot;,position=&quot;dodge&quot;) + geom_errorbar(aes(ymin=mean-sd,ymax=mean+sd),width=0.25, size=1,position= position_dodge(0.9), alpha=0.3)+ geom_text(position=position_dodge(0.9),vjust=-0.5, hjust=1.2) p #theme classic p=ggplot(df_sumzd,aes(x=Species,y=mean,fill=Mes_type,label=mean))+ geom_bar(stat=&quot;identity&quot;,position=&quot;dodge&quot;) + geom_errorbar(aes(ymin=mean-sd,ymax=mean+sd),width=0.25, size=1,position= position_dodge(0.9), alpha=0.3)+ geom_text(position=position_dodge(0.9),vjust=-0.5, hjust=1)+ theme_classic() p #theme bw p=ggplot(df_sumzd,aes(x=Species,y=mean,fill=Mes_type,label=mean))+ geom_bar(stat=&quot;identity&quot;,position=&quot;dodge&quot;) + geom_errorbar(aes(ymin=mean-sd,ymax=mean+sd),width=0.25, size=1,position= position_dodge(0.9), alpha=0.3)+ geom_text(position=position_dodge(0.9),vjust=-0.5, hjust=1.1)+ theme_bw() p # I don&#39;t like this plot. p=ggplot(df_sumzd,aes(x=Species,y=mean,fill=Mes_type))+ geom_bar(stat=&quot;identity&quot;,position=&quot;dodge&quot;) + geom_errorbar(aes(ymin=mean-sd,ymax=mean+sd),width=0.25, size=1,position= position_dodge(0.9), alpha=0.3)+ theme_bw() p # coord flip, this to when x axis labels are very long and overlap each other p=ggplot(df_sumzd,aes(x=Species,y=mean,fill=Mes_type))+ geom_bar(stat=&quot;identity&quot;,position=&quot;dodge&quot;) + geom_errorbar(aes(ymin=mean-sd,ymax=mean+sd),width=0.25, size=1,position= position_dodge(0.9), alpha=0.3)+ theme_bw()+ coord_flip() p #Thats it for bar plot. "],["descriptive-statistics-using-r.html", "Week 4 Descriptive Statistics Using R", " Week 4 Descriptive Statistics Using R "],["testing-hypothesis.html", "Week 5 Testing Hypothesis 5.1 Test 1. Pearson Correlation Test 5.2 T-Test 5.3 Chi-Square Test 5.4 ANOVA", " Week 5 Testing Hypothesis 5.1 Test 1. Pearson Correlation Test 5.2 T-Test 5.3 Chi-Square Test 5.4 ANOVA "],["other-parametric-tests.html", "Week 6 Other Parametric Tests", " Week 6 Other Parametric Tests "],["non-parametic-tests.html", "Week 7 Non-Parametic Tests", " Week 7 Non-Parametic Tests "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
